import "dotenv/config";
import { installWindowsTools } from "./installwindowsTools";
import { installLinuxTools } from "./installLinuxTools";
import { installMacTools } from "./installMacTools";
import { getOS } from "./OsType";
import { Platform } from "azure-pipelines-task-lib";
export const OSTypeMapper = {
  [Platform.Windows.toString()]: "win32",
  [Platform.Linux.toString()]: "linux",
  [Platform.MacOS.toString()]: "darwin",
};

export const OSToToolMappergpg: { [key: string]: any } = {
  linux: ["ssm-scd-linux-x64", "smctl-linux-x64"],
  win32: ["ssm-scd-windows-x64", "smctl-windows-x64"],
  darwin: "smctk-apple-any.zip",
};

export const OSToToolMapperkeypair: { [key: string]: any } = {
  linux: ["smpkcs11-linux-x64", "smctl-linux-x64"],
  win32: [
    "smpkcs11-windows-x64",
    "smksp-windows-x86",
    "smksp-windows-x64",
    "smctl-windows-x64",
  ],
  darwin: "smctk-apple-any.zip",
};

export const OSToToolMapper: { [key: string]: any } = {
  linux: ["smtools-linux-x64.zip"],
  win32: ["smtools-windows-x64.msi"],
  darwin: "smctk-apple-any.zip",
};
export async function installToolsBasedOnOS(
  installationPath: string,
  usecase: string,
  outputVar:any
): Promise<string> {
  const OS = getOS();
  let toolToBeUsed;
  switch (usecase) {
    case "keypair-signing":
      toolToBeUsed = OSToToolMapper[OS];
      usecase = "keypair-signing";
      break;
    case "gpg-signing":
      toolToBeUsed = OSToToolMappergpg[OS];
      usecase = "gpg-signing";
      break;
    default:
      toolToBeUsed = OSToToolMapper[OS];
      usecase = "";
      break;
  }

  if (OS == "win32") {
    return await installWindowsTools(installationPath, toolToBeUsed, usecase,outputVar);
  } else if (OS == "linux") {
    return await installLinuxTools(installationPath, toolToBeUsed, usecase,outputVar);
  } else {
    return await installMacTools(installationPath, toolToBeUsed);
  }
}

module.exports = { installToolsBasedOnOS, getOS };
