"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runLnxToolBasedInstallationOrExtraction = void 0;
const toolLib = __importStar(require("azure-pipelines-tool-lib/tool"));
const path_1 = __importDefault(require("path"));
const services_1 = require("./utils/services");
async function runLnxToolBasedInstallationOrExtraction(toolToBeUsed, tempDirectoryPath, usecase) {
    let extractPath = tempDirectoryPath;
    for (let i = 0; i < toolToBeUsed.length; i++) {
        const clientToolsDownloadPath = await (0, services_1.callApi)(toolToBeUsed[i], tempDirectoryPath);
        if (usecase == "" || usecase == "keypair-signing") {
            if (toolToBeUsed[i].includes(".zip")) {
                console.log("tool is in a zip file trying to extract it", clientToolsDownloadPath);
                await toolLib.extractZip(clientToolsDownloadPath, tempDirectoryPath);
                extractPath = path_1.default.join(tempDirectoryPath, toolToBeUsed[i].replace(".zip", ""));
                console.log("zip extraction complete , path is ", extractPath);
            }
        }
    }
    return extractPath;
}
exports.runLnxToolBasedInstallationOrExtraction = runLnxToolBasedInstallationOrExtraction;
