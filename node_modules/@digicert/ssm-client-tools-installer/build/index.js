"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const fileSystemUtils_1 = require("./utils/fileSystemUtils");
require("dotenv/config");
const installToolsOnOS_1 = require("./installToolsOnOS");
const tl = __importStar(require("azure-pipelines-task-lib/task"));
const core = __importStar(require("@actions/core"));
async function main(usecase = "") {
    var outputVar = { "ret_code": 1, "imp_file_paths": {} };
    try {
        const tempDirectoryPath = (0, fileSystemUtils_1.getTempDirectory)();
        console.log("using path ", tempDirectoryPath);
        const configFilePath = await (0, installToolsOnOS_1.installToolsBasedOnOS)(tempDirectoryPath, usecase, outputVar);
        if (usecase != "gpg-signing") {
            console.info("\nPKCS11 config file written in path: ", configFilePath);
            tl.setVariable("PKCS11_CONFIG", configFilePath, false, true);
            outputVar.imp_file_paths.PKCS11_CONFIG = configFilePath;
            console.info("\nPKCS11 config file written in path: ", configFilePath);
        }
        console.log("\nSSM tools setup completed");
        console.log(outputVar.imp_file_paths.PKCS11_CONFIG);
        return JSON.stringify(outputVar);
    }
    catch (err) {
        core.setFailed(err.message);
        console.error("\nerror when executing setup task of SSM", err);
        return JSON.stringify(outputVar);
    }
}
exports.main = main;
main();
module.exports = { main };
