"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runWinToolBasedInstallationOrExtraction = void 0;
const path_1 = __importDefault(require("path"));
const services_1 = require("./utils/services");
const tl = __importStar(require("azure-pipelines-task-lib/task"));
async function runWinToolBasedInstallationOrExtraction(toolToBeUsed, tempDirectoryPath, usecase) {
    let extractPath = "";
    for (let i = 0; i < toolToBeUsed.length; i++) {
        await (0, services_1.callApi)(toolToBeUsed[i], tempDirectoryPath);
        if (usecase == "" || usecase == "keypair-signing") {
            //checking for .msi files
            if (toolToBeUsed[i].includes(".msi")) {
                extractPath = path_1.default.join(tempDirectoryPath, toolToBeUsed[i].replace(".msi", ""));
                //   //tool to run .msi file
                const msiRunner = tl
                    .tool("msiexec")
                    .arg([
                    `/i`,
                    `${tempDirectoryPath}\\${toolToBeUsed}`,
                    "/quiet",
                    `INSTALLDIR=${extractPath}`,
                ]);
                const regReturnCode = await msiRunner.exec();
                if (regReturnCode != 0) {
                    throw new Error(`Installation of msi failed with return code ${regReturnCode}`);
                }
                console.log("installation of smctl returned code", regReturnCode);
            }
            extractPath = path_1.default.join(tempDirectoryPath);
            if (getAgentType() == AgentType.SELF_HOSTED) {
                //cli tools installation
                const installationLocation = tl
                    .tool("wmic")
                    .arg([
                    "product",
                    "where",
                    "Vendor='DigiCert Inc.' and name='DigiCert One Signing Manager Tools'",
                    "get",
                    "installlocation",
                    "/format:list",
                ])
                    .execSync();
                const { stdout } = installationLocation;
                extractPath = stdout.split("=")[1].trim();
            }
        }
    }
    return extractPath;
}
exports.runWinToolBasedInstallationOrExtraction = runWinToolBasedInstallationOrExtraction;
var AgentType;
(function (AgentType) {
    AgentType[AgentType["AZURE_HOSTED"] = 0] = "AZURE_HOSTED";
    AgentType[AgentType["SELF_HOSTED"] = 1] = "SELF_HOSTED";
})(AgentType || (AgentType = {}));
const getAgentType = () => {
    return AgentType.SELF_HOSTED;
};
module.exports = { runWinToolBasedInstallationOrExtraction, getAPICall: services_1.getAPICall };
