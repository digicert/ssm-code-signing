"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runWinToolBasedInstallationOrExtraction = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const services_1 = require("./utils/services");
const tl = __importStar(require("azure-pipelines-task-lib/task"));
async function runWinToolBasedInstallationOrExtraction(toolToBeUsed, tempDirectoryPath) {
    const urlToDownloadTool = `signingmanager/api-ui/v1/releases/noauth/${toolToBeUsed}/download`;
    console.log("Tool to be downloaded and used {} and url is {}", toolToBeUsed, urlToDownloadTool);
    console.log("ui Api", services_1.uiAPIPrefix);
    const toolFileData = await (0, services_1.getAPICall)(urlToDownloadTool, {
        responseType: "arraybuffer",
    });
    //file writing part
    const clientToolsDownloadPath = path_1.default.join(tempDirectoryPath, toolToBeUsed);
    fs_1.default.writeFileSync(clientToolsDownloadPath, toolFileData);
    console.log("file after write ", fs_1.default.statSync(clientToolsDownloadPath).size);
    let extractPath = "";
    //checking for .msi files
    if (toolToBeUsed.includes(".msi")) {
        extractPath = path_1.default.join(tempDirectoryPath, toolToBeUsed.replace(".msi", ""));
        //   if (toolToBeUsed.includes(".zip")) {
        //   console.log(
        //     "tool is in a zip file trying to extract it",
        //     clientToolsDownloadPath
        //   );
        //   await extract(clientToolsDownloadPath as string, {
        //     dir: tempDirectoryPath,
        //   });
        //   // await toolLib.extractZip(
        //   //   clientToolsDownloadPath as string,
        //   //   tempDirectoryPath
        //   // );
        //   extractPath = path.join(
        //     tempDirectoryPath,
        //     toolToBeUsed.replace(".zip", "")
        //   );
        //   console.log("zip extraction complete , path is ", extractPath);
        // }
        //tool to run .msi file
        let msiRunner = tl
            .tool("msiexec")
            .arg([
            `/i`,
            `${tempDirectoryPath}\\${toolToBeUsed}`,
            "/quiet",
            `INSTALLDIR=${extractPath}`,
        ]);
        let regReturnCode = await msiRunner.exec();
        if (regReturnCode != 0) {
            throw new Error(`Installation of msi failed with return code ${regReturnCode}`);
        }
        console.log("installation of smctl returned code", regReturnCode);
        //cli tools installation
        const installationLocation = tl
            .tool("wmic")
            .arg([
            "product",
            "where",
            "Vendor='DigiCert Inc.' and name='DigiCert One Signing Manager Tools'",
            "get",
            "installlocation",
            "/format:list",
        ])
            .execSync();
        const { stdout } = installationLocation;
        extractPath = stdout.split("=")[1].trim();
        // if (
        //   stdout !== null &&
        //   stdout.trim() !== "" &&
        //   !stdout.includes("No Instance(s) Available")
        // ) {
        //   extractPath = stdout.split("=")[1].trim();
        // } 
        // else {
        //   throw new Error("Installation path is not found, internal error");
        // }
    }
    return extractPath;
}
exports.runWinToolBasedInstallationOrExtraction = runWinToolBasedInstallationOrExtraction;
module.exports = { runWinToolBasedInstallationOrExtraction, getAPICall: services_1.getAPICall };
