"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installToolsBasedOnOS = exports.OSToToolMapper = exports.getOS = void 0;
const os_1 = __importDefault(require("os"));
require("dotenv/config");
const installwindowsTools_1 = require("./installwindowsTools");
const installLinuxTools_1 = require("./installLinuxTools");
const installMacTools_1 = require("./installMacTools");
const getOS = () => os_1.default.type();
exports.getOS = getOS;
exports.OSToToolMapper = {
    linux: "smtools-linux-x64.zip",
    win32: "smtools-windows-x64.msi",
    MacOS: "smctk-apple-any"
};
async function installToolsBasedOnOS(installationPath) {
    let OS = (0, exports.getOS)();
    switch (OS) {
        case "Darwin":
            OS = "MacOS";
            break;
        case "Linux":
            OS = "linux";
            break;
        case "Windows_NT":
            OS = "win32";
            break;
    }
    console.log("os type", OS);
    // if (!OSToToolMapper.hasOwnProperty(OS)) {
    //   throw new Error("Mac OS is not yet supported");
    // }
    const toolToBeUsed = exports.OSToToolMapper[OS];
    if (OS == "win32") {
        return await (0, installwindowsTools_1.installWindowsTools)(installationPath, toolToBeUsed);
    }
    else if (OS == "linux") {
        console.log("welcome to linux!!");
        return await (0, installLinuxTools_1.installLinuxTools)(installationPath, toolToBeUsed);
    }
    else {
        console.log("welcome to macos");
        return await (0, installMacTools_1.installMacTools)(installationPath, toolToBeUsed);
    }
}
exports.installToolsBasedOnOS = installToolsBasedOnOS;
module.exports = { installToolsBasedOnOS };
