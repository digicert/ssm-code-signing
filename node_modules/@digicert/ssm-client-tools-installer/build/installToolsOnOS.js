"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installToolsBasedOnOS = exports.OSToToolMapper = exports.OSToToolMapperkeypair = exports.OSToToolMappergpg = exports.OSTypeMapper = void 0;
require("dotenv/config");
const installwindowsTools_1 = require("./installwindowsTools");
const installLinuxTools_1 = require("./installLinuxTools");
const installMacTools_1 = require("./installMacTools");
const OsType_1 = require("./OsType");
const azure_pipelines_task_lib_1 = require("azure-pipelines-task-lib");
exports.OSTypeMapper = {
    [azure_pipelines_task_lib_1.Platform.Windows.toString()]: "win32",
    [azure_pipelines_task_lib_1.Platform.Linux.toString()]: "linux",
    [azure_pipelines_task_lib_1.Platform.MacOS.toString()]: "darwin",
};
exports.OSToToolMappergpg = {
    linux: ["ssm-scd-linux-x64", "smctl-linux-x64"],
    win32: ["ssm-scd-windows-x64", "smctl-windows-x64"],
    darwin: "smctk-apple-any.zip",
};
exports.OSToToolMapperkeypair = {
    linux: ["smpkcs11-linux-x64", "smctl-linux-x64"],
    win32: [
        "smpkcs11-windows-x64",
        "smksp-windows-x86",
        "smksp-windows-x64",
        "smctl-windows-x64",
    ],
    darwin: "smctk-apple-any.zip",
};
exports.OSToToolMapper = {
    linux: ["smtools-linux-x64.zip"],
    win32: ["smtools-windows-x64.msi"],
    darwin: "smctk-apple-any.zip",
};
async function installToolsBasedOnOS(installationPath, usecase, outputVar) {
    const OS = (0, OsType_1.getOS)();
    let toolToBeUsed;
    switch (usecase) {
        case "keypair-signing":
            toolToBeUsed = exports.OSToToolMapper[OS];
            usecase = "keypair-signing";
            break;
        case "gpg-signing":
            toolToBeUsed = exports.OSToToolMappergpg[OS];
            usecase = "gpg-signing";
            break;
        default:
            toolToBeUsed = exports.OSToToolMapper[OS];
            usecase = "";
            break;
    }
    if (OS == "win32") {
        return await (0, installwindowsTools_1.installWindowsTools)(installationPath, toolToBeUsed, usecase, outputVar);
    }
    else if (OS == "linux") {
        return await (0, installLinuxTools_1.installLinuxTools)(installationPath, toolToBeUsed, usecase, outputVar);
    }
    else {
        return await (0, installMacTools_1.installMacTools)(installationPath, toolToBeUsed);
    }
}
exports.installToolsBasedOnOS = installToolsBasedOnOS;
module.exports = { installToolsBasedOnOS, getOS: OsType_1.getOS };
