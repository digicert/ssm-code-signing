"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runToolBasedInstallationOrExtraction = void 0;
const fs_1 = __importDefault(require("fs"));
const services_1 = require("./utils/services");
const path_1 = __importDefault(require("path"));
const tl = __importStar(require("azure-pipelines-task-lib/task"));
const extract_zip_1 = __importDefault(require("extract-zip"));
function runToolBasedInstallationOrExtraction(toolToBeUsed, tempDirectoryPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const urlToDownloadTool = `${services_1.uiAPIPrefix}/releases/noauth/${toolToBeUsed}/download`;
        console.log("Tool to be downloaded and used {} and url is {}", toolToBeUsed, urlToDownloadTool);
        console.log("ui Api", services_1.uiAPIPrefix);
        const toolFileData = yield services_1.getAPICall(urlToDownloadTool, {
            responseType: "arraybuffer",
        });
        //file writing part
        const clientToolsDownloadPath = path_1.default.join(tempDirectoryPath, toolToBeUsed);
        fs_1.default.writeFileSync(clientToolsDownloadPath, toolFileData);
        console.log("file after write ", fs_1.default.statSync(clientToolsDownloadPath).size);
        let extractPath = "";
        if (toolToBeUsed.includes(".zip")) {
            console.log("tool is in a zip file trying to extract it", clientToolsDownloadPath);
            yield extract_zip_1.default(clientToolsDownloadPath, {
                dir: tempDirectoryPath,
            });
            extractPath = path_1.default.join(tempDirectoryPath, toolToBeUsed.replace(".zip", ""));
            console.log("zip extraction complete , path is ", extractPath);
        }
        else if (toolToBeUsed.includes(".msi")) {
            extractPath = path_1.default.join(tempDirectoryPath, toolToBeUsed.replace(".msi", ""));
            let msiRunner = tl
                .tool("msiexec")
                .arg([
                `/i`,
                `${tempDirectoryPath}\\${toolToBeUsed}`,
                "/quiet",
                `INSTALLDIR=${extractPath}`,
            ]);
            //         var createMsi = require('./')
            // var options = {
            //   // required
            //   source: `${toolFileData}`,
            //   output: '/Users/matt/Code/loop/loopjs-packager/releases/Loop Drop v1.0.0.msi',
            //   name: 'Loop Drop',
            //   upgradeCode: 'YOUR-GUID-HERE',
            //   version: '1.0.0',
            //   manufacturer: 'loopjs.com',
            //   iconPath: '/Users/matt/Code/loop/loopjs-packager/icon.ico',
            //   executable: 'Loop Drop.exe',
            //   // optional
            //   description: "Some description",
            //   arch: 'x86',
            //   localInstall: true
            // }
            // createMsi(options, function (err:any) {
            //   if (err) throw err
            //   console.log('Outputed to ' + options.output)
            // })
            //  const child=spawn('cmd',[
            //  `${tempDirectoryPath}\\${toolToBeUsed}`],{shell:true})
            //  child.stdout.on('data', function(data) {
            //   console.log("stdout1: " + data);
            // });
            // child.stderr.on('data', function(data) {
            //   console.log("stdout2: " + data);
            // });
            // //here you can "react" when the spawned process ends
            // child.on('close', function(code) {
            //   console.log("Child process exited with code " + code);
            // });
            // // THIS IS TAKEN FROM NODE JS DOCS
            // // By default, the parent will wait for the detached child to exit.
            // // To prevent the parent from waiting for a given child, use the child.unref() method,
            // // and the parent's event loop will not include the child in its reference count.
            // child.unref();
            let regReturnCode = yield msiRunner.exec();
            if (regReturnCode != 0) {
                throw new Error(`Installation of msi failed with return code ${regReturnCode}`);
            }
            console.log("installation of smctl returned code", regReturnCode);
            //this is for self hosted agent where the installation is already completed
            // if (getAgentType() == AgentType.SELF_HOSTED) {
            const installationLocation = tl
                .tool("wmic")
                .arg([
                "product",
                "where",
                "Vendor='DigiCert Inc.' and name='DigiCert One Signing Manager Tools'",
                "get",
                "installlocation",
                "/format:list",
            ])
                .execSync();
            //clumsy but does the job
            const { stdout } = installationLocation;
            if (stdout !== null &&
                stdout.trim() !== "" &&
                !stdout.includes("No Instance(s) Available")) {
                extractPath = stdout.split("=")[1].trim();
            }
            else {
                throw new Error("Installation path is not found, internal error");
            }
            // }
        }
        return extractPath;
    });
}
exports.runToolBasedInstallationOrExtraction = runToolBasedInstallationOrExtraction;
// enum AgentType {
//   AZURE_HOSTED,
//   SELF_HOSTED,
// }
// const getAgentType = () => {
//   return AgentType.SELF_HOSTED
// };
