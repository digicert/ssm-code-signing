"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installLinuxTools = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const tl = __importStar(require("azure-pipelines-task-lib/task"));
const services_1 = require("./utils/services");
const runLinuxTools_1 = require("./runLinuxTools");
async function installLinuxTools(installationPath, toolToBeUsed, usecase, outputVar) {
    const directoryPath = usecase == ""
        ? `${installationPath}`
        : `${installationPath}//DigiCert One Signing Manager Tools/`;
    try {
        fs_1.default.mkdirSync(`${directoryPath}`);
    }
    catch (err) { }
    const extractPath = await (0, runLinuxTools_1.runLnxToolBasedInstallationOrExtraction)(toolToBeUsed, directoryPath, usecase);
    console.log("path where the ssm tools were installed/extracted is ", extractPath);
    outputVar.imp_file_paths["extractPath"] = extractPath;
    const setExecutableFlagForSmctl = tl
        .tool("chmod")
        .arg("+x")
        .arg(path_1.default.join(extractPath, "smctl"));
    const syncRetCode = await setExecutableFlagForSmctl.exec();
    console.log("set executable flag for smctl" + syncRetCode);
    let configFilePath = "";
    if (usecase != "gpg-signing") {
        const pkcs11FileName = "smpkcs11.so";
        configFilePath = await (0, services_1.getConfigFilePath)(pkcs11FileName, extractPath);
    }
    return configFilePath;
}
exports.installLinuxTools = installLinuxTools;
