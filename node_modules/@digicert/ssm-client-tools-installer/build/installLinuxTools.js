"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installLinuxTools = exports.runLnxToolBasedInstallationOrExtraction = void 0;
const toolLib = __importStar(require("azure-pipelines-tool-lib/tool"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const tl = __importStar(require("azure-pipelines-task-lib/task"));
const services_1 = require("./utils/services");
async function runLnxToolBasedInstallationOrExtraction(toolToBeUsed, tempDirectoryPath) {
    const urlToDownloadTool = `signingmanager/api-ui/v1/releases/noauth/${toolToBeUsed}/download`;
    console.log("Tool to be downloaded and used {} and url is {}", toolToBeUsed, urlToDownloadTool);
    console.log("ui Api", services_1.uiAPIPrefix);
    const toolFileData = await (0, services_1.getAPICall)(urlToDownloadTool, {
        responseType: "arraybuffer",
    });
    //file writing part
    const clientToolsDownloadPath = path_1.default.join(tempDirectoryPath, toolToBeUsed);
    fs_1.default.writeFileSync(clientToolsDownloadPath, toolFileData);
    console.log("file after write ", fs_1.default.statSync(clientToolsDownloadPath).size);
    let extractPath = "";
    if (toolToBeUsed.includes(".zip")) {
        console.log("tool is in a zip file trying to extract it", clientToolsDownloadPath);
        // await extract(clientToolsDownloadPath as string, {
        //   dir: tempDirectoryPath,
        // });
        await toolLib.extractZip(clientToolsDownloadPath, tempDirectoryPath);
        extractPath = path_1.default.join(tempDirectoryPath, toolToBeUsed.replace(".zip", ""));
        console.log("zip extraction complete , path is ", extractPath);
    }
    // const installationLocation = tl
    //   .tool("wmic")
    //   .arg([
    //     "product",
    //     "where",
    //     "Vendor='DigiCert Inc.' and name='DigiCert One Signing Manager Tools'",
    //     "get",
    //     "installlocation",
    //     "/format:list",
    //   ])
    //   .execSync();
    // const { stdout } = installationLocation;
    // if (
    //   stdout !== null &&
    //   stdout.trim() !== "" &&
    //   !stdout.includes("No Instance(s) Available")
    // ) {
    //   extractPath = stdout.split("=")[1].trim();
    // } else {
    //   throw new Error("Installation path is not found, internal error");
    // }
    // }
    return extractPath;
}
exports.runLnxToolBasedInstallationOrExtraction = runLnxToolBasedInstallationOrExtraction;
async function installLinuxTools(installationPath, toolToBeUsed) {
    try {
        fs_1.default.mkdirSync(`${installationPath}`);
    }
    catch (err) { }
    const extractPath = await runLnxToolBasedInstallationOrExtraction(toolToBeUsed, installationPath);
    console.log("path where the ssm tools were installed/extracted is ", extractPath);
    let setExecutableFlagForSmctl = tl
        .tool("chmod")
        .arg("+x")
        .arg(path_1.default.join(extractPath, "smctl"));
    let syncRetCode = await setExecutableFlagForSmctl.exec();
    console.log("set executable flag for smctl" + syncRetCode);
    const pkcs11FileName = "smpkcs11.so";
    const configFilePath = await (0, services_1.getConfigFilePath)(pkcs11FileName, extractPath);
    return configFilePath;
}
exports.installLinuxTools = installLinuxTools;
