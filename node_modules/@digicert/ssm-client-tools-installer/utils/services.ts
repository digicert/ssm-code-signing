import axios, { AxiosRequestConfig } from "axios";
import * as tl from "azure-pipelines-task-lib/task";
import path from "path";
import fs from "fs";

const getHost = () => {
  return "https://demo.one.digicert.com";
};

export const uiAPIPrefix = "signingmanager/api-ui/v1";

export const getAPICall = async (uri: string, config: AxiosRequestConfig) => {
  const apiKey: string | undefined = extractAndValidateApiKey();

  const options: AxiosRequestConfig = {
    ...config,
  };

  if (apiKey) {
    options.headers = {
      "x-api-key": apiKey,
    };
  }
  const host = getHost();
  const response = await axios.get(`${host}/${uri}`, options);
  return response.data;
};

function extractAndValidateApiKey() {
  return tl.getInput("APIKey", false) || process.env.SM_API_KEY;
}

export const getConfigFilePath = async (
  pkcs11FileName: string,
  extractPath: string
) => {
  const configFilePath = path.join(extractPath, "pkcs11properties.cfg");
  console.info(
    "The pkcs11 library path set is ",
    path.join(extractPath, pkcs11FileName),
    "and config file path is ",
    configFilePath
  );
  fs.writeFileSync(
    configFilePath,
    `name=signingmanager\r\nlibrary=${path.join(
      extractPath,
      pkcs11FileName
    )}\r\nslotListIndex=0`
  );

  return configFilePath;
};
const toolDownloded: { [key: string]: string } = {
  "ssm-scd-windows-x64": "ssm-scd.exe",
  "smpkcs11-windows-x64": "smpkcs11.dll",
  "smksp-windows-x86": "smksp-x86.dll",
  "smksp-windows-x64": "smksp-x64.dll",
  "smctl-windows-x64": "smctl.exe",
  "smtools-windows-x64.msi": "smtools-windows-x64.msi",
  "smtools-linux-x64.zip": "smtools-windows-x64.zip",
  "smpkcs11-linux-x64": "smpkcs11.dll",
  "smctl-linux-x64": "smctl",
  "ssm-scd-linux-x64": "ssm-scd.exe",
};

export const callApi = async (
  toolToBeUsed: string,
  getTempDirectoryPath: string
) => {
  const urlToDownloadTool = `${uiAPIPrefix}/releases/noauth/${toolToBeUsed}/download`;
  console.log(
    "Tool to be downloaded and used {} and url is {}",
    toolToBeUsed,
    urlToDownloadTool
  );
  const toolFileData = await getAPICall(urlToDownloadTool, {
    responseType: "arraybuffer",
  });

  //file writing part
  const clientToolsDownloadPath = path.join(
    getTempDirectoryPath,
    toolDownloded[toolToBeUsed]
  );
  fs.writeFileSync(clientToolsDownloadPath, toolFileData);

  console.log("file after write ", fs.statSync(clientToolsDownloadPath).size);

  return clientToolsDownloadPath;
};

module.exports = {
  getAPICall,
  getConfigFilePath,
  callApi,
  extractAndValidateApiKey,
};
