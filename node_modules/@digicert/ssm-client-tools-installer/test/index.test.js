
const main=require('../index')
const installer=require('./../installwindowsTools')
const installToolsBasedOnOS=require('../installToolsOnOS')
const installationPath="C:\Users\admin\AppData\Local\Temp";
const tooltobeused="smtools-windows-x64.msi";
const configfile="C:\\Users\\YASHVA~1.BAB\\AppData\\Local\\Temp\\smtools-windows-x64"
const services=require("../utils/services")
const wintool=require('../runwintools');
const installLinux=require("../installLinuxTools");
const tr=require('azure-pipelines-task-lib/toolrunner')
const { async } = require('q');
const { tool } = require('azure-pipelines-task-lib');
const urlToDownloadTool = `${services.uiAPIPrefix}/releases/noauth/$smtools-windows-x64.msi/download`;
const tl = require("azure-pipelines-task-lib/task")
const ttm = require('azure-pipelines-task-lib/mock-test');
// const { async } = require('q');
const extractPath="C:\\Users\\YASHVA~1.BAB\\AppData\\Local\\Temp"
// test("testcase 1", ()=>{
//   return main().then(val=>{
//       console.log(val)
//       expect(val).toBe('ssm tools installed')   
//    }); 
   
// })
// 3c 21 64 6f 63 74 79 70 65 20
// const api=jest.spyOn(axios,"getAPICall")
//testing windowstoolsextractor
test("windowstoolsextraction",async()=>{
   
   const addapi=jest.spyOn(services,"getAPICall");
   addapi.mockReturnValue("3c");
   regReturnCode=jest.fn(()=>11)
   await expect(wintool.runWinToolBasedInstallationOrExtraction(tooltobeused,installationPath)).toBeDefined();
   expect(addapi).toHaveBeenCalled()
   // expect(regReturnCode).toHaveBeenCalled()
   // expect(addmock).toHaveBeenCalledTimes(1);
})


test("windowstools",async ()=>{
  
    

    services.getAPICall=jest.fn()  
    wintool.runWinToolBasedInstallationOrExtraction=jest.fn(()=>extractPath)
    services.getConfigFilePath=jest.fn(()=>configfile)
   

   
   const config=await installer.installWindowsTools(installationPath,tooltobeused);
   
    expect(wintool.runWinToolBasedInstallationOrExtraction).toHaveBeenCalled();
    expect(wintool.runWinToolBasedInstallationOrExtraction).toHaveBeenCalledTimes(1);
    expect(config).toBe(configfile)
   
   
})


test("ostype call",async ()=>{
  
    

   services.getAPICall=jest.fn()  
   wintool.runWinToolBasedInstallationOrExtraction=jest.fn(()=>extractPath)
   services.getConfigFilePath=jest.fn(()=>configfile)
  
   const addmock=jest.spyOn(installer,"installWindowsTools")
  
  
   await installToolsBasedOnOS.installToolsBasedOnOS(installationPath);
  expect(addmock).toHaveBeenCalled()
   expect(wintool.runWinToolBasedInstallationOrExtraction).toHaveBeenCalled();
   expect(wintool.runWinToolBasedInstallationOrExtraction).toHaveBeenCalledTimes(1);
 
  
  
})

test("mac call",async ()=>{
  
    

   // services.getAPICall=jest.fn()  
   // wintool.runWinToolBasedInstallationOrExtraction=jest.fn(()=>extractPath)
   // services.getConfigFilePath=jest.fn(()=>configfile)
  
   // const addmock=jest.spyOn(installer,"installWindowsTools")
   // installToolsBasedOnOS.getOS=jest.fn(()=>"Darwin")
   
   const addmock=jest.spyOn(tl,"tool");
   
   await expect(wintool.runWinToolBasedInstallationOrExtraction(tooltobeused,installationPath)).toBeDefined();
   //  expect(addmock).toHaveBeenCalled()
   // expect(wintool.runWinToolBasedInstallationOrExtraction).toHaveBeenCalled();
   // expect(wintool.runWinToolBasedInstallationOrExtraction).toHaveBeenCalledTimes(1);
 
  
  
})



test("main call",async ()=>{
  
    

   services.getAPICall=jest.fn()  
   wintool.runWinToolBasedInstallationOrExtraction=jest.fn(()=>extractPath)
   services.getConfigFilePath=jest.fn(()=>configfile)
  
   const addmock=jest.spyOn(installer,"installWindowsTools")

   installToolsBasedOnOS.installToolsBasedOnOS=jest.fn(()=>addmock)
   const ssmTools=await main.main();
   
   expect(installToolsBasedOnOS.installToolsBasedOnOS).toHaveBeenCalled();
   expect(ssmTools).toBe(0)
   
  
  
})

test("main function Error branch testing",async ()=>{
   // services.getAPICall=jest.fn()  
   // wintool.runWinToolBasedInstallationOrExtraction=jest.fn(()=>extractPath)
   // services.getConfigFilePath=jest.fn(()=>configfile)
  
   // const addmock=jest.spyOn(installer,"installWindowsTools")

   installToolsBasedOnOS.installToolsBasedOnOS=jest.fn(()=>{ throw new Error()})
   const ssmTools=await main.main();
   
   expect(installToolsBasedOnOS.installToolsBasedOnOS).toHaveBeenCalled();
   expect(ssmTools).toBe("installation failed")

})
 

 test("msi testing",async ()=>{
   

//   wintool.msiRunner.exec=jest.fn(()=>10)
     tr.ToolRunner.exec=jest.fn(()=>10)
//    installLinux.installLinuxTools=jest.fn()
   await expect(wintool.runWinToolBasedInstallationOrExtraction(tooltobeused,installationPath)).toBeDefined();
   
   //  expect(installToolsBasedOnOS.getOS).toHaveBeenCalled();

 })

// test("apikey",async()=>{
// const tool=await services.getAPICall(urlToDownloadTool, {
//    responseType: "arraybuffer",
//  })
//  expect(tool).toBeDefined()
// })
