import os from "os";
import { tempDirectory } from "./utils/fileSystemUtils";
import "dotenv/config";
import { installToolsBasedOnOS } from "./installToolsOnOS";
import { installWindowsTools } from "./installwindowsTools";
import { installLinuxTools } from "./installLinuxTools";
// const getOS = () => os.type();

// const OSToToolMapper: { [key: string]: string } = {
//   linux: "smtools-linux-x64.zip",
//   win32: "smtools-windows-x64.msi",
// };

// export async function installToolsBasedOnOS(installationPath: string) {
//   let OS = getOS();
//   switch (OS) {
//     case "Darwin":
//       console.log("MacOS");
//       break;
//     case "Linux":
//       OS = "linux";
//       break;
//     case "Windows_NT":
//       OS = "win32";
//       break;
//   }
//   console.log("os type", OS);
//   if (!OSToToolMapper.hasOwnProperty(OS)) {
//     throw new Error("Mac OS is not yet supported");
//   }
//   const toolToBeUsed = OSToToolMapper[OS];

//   if (OS == "win32") {
//     return await installWindowsTools(installationPath, toolToBeUsed);
//   } else if (OS == "linux") {
//     console.log("welcome to linux!!");
//     return await installLinuxTools(installationPath, toolToBeUsed);
//   }
// }
process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
 async function main()  {
  try {
    const tempDirectoryPath = tempDirectory();
    console.log("using path ", tempDirectoryPath);
    const configFilePath = await installToolsBasedOnOS(tempDirectoryPath);
    console.info("PKCS11 config file written in path: ", configFilePath);
    console.log("SSM tools setup completed");
    return 0;
  } catch (err: any) {
    console.error("error when executing setup task of SSM", err);
    return "installation failed";
  }
};
 main();

 module.exports={main,installToolsBasedOnOS}

